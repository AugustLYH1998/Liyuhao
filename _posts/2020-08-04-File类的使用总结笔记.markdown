---
layout: post
title: File类
date: 2020-08-04 12:52:11
tags: Java
color: rgb(255,90,90)
cover: '/assets/2020-08-04-File.png'
subtitle: File类的使用总结笔记
---



# File类概述和构造方法

File类：代表操作系统的文件对象。文件和文件夹。
File类：是用来操作操作系统的文件对象的，删除文件，获取文件信息，创建文件(文件夹)，广义来说操作系统认为文件包含（文件和文件夹) 。



**File：它是文件和目录路径名的抽象表示**
 - 文件和目录是可以通过File封装成对象的

 - 对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。
 - 它可以是存在的,也可以是不存在的。
 - 将来是要通过具体的操作把这个路径的内容转换为具体存在的。


```java
File(String pathname)
根据路径获取文件对象
通过将给定的路径名字符串转换为抽象路径名来创建新的File实例

File(String parent, String child)
从父路径名字符串和子路径名字符串创建新的File实例

File(File parent, String child)
从父抽象路径名和子路径名字符串创建新的File实例
```

# File类对象获取

```java
File类创建文件对象的格式:

File f = new File ("绝对路径/相对路径");
绝对路径:从磁盘的的盘符一路走到目的位置的路径。
	--绝对路径依赖具体的环境,一旦脱离环境，代码可能出错.
相对路径:不带盘符的。
	--默认是直接相对到工程目录下寻找文件的。
	--相对路径只能用于寻找工程下的文件，
	--能用相对路径就应该尽量使用，可以跨平台。

File f= new File("文件对象/文件夹对象");
广义来说:文件是包含文件和文件夹的。
```

# File类创建功能

```java
public boolean createNewFile()
当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件

public boolean mkdir()
创建一级目录
创建由此抽象路径名命名的目录

public boolean mkdirs()
创建多级目录
创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录
```
# 文件路径分隔符的区别

```java
-- a.使用正斜杠: /
-- b.使用反斜杠: \\   因为反斜杠涉及转义字符，所以写两个。
-- c.使用分隔符API: File.separator
```

# 绝对路径和相对路径的区别

 - 绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。
 ```java
 例如: E:\ myFile \ java.txt
 ```
 - 相对路径：必须使用取自其他路径名的信息进行解释。
 ```java
 例如: myFile\java.txt
 ```
---

# File类判断和获取功能

```java
public boolean isDirectory()
测试此抽象路径名表示的File是否为目录(文件夹)

public boolean isFile()
测试此抽象路径名表示的File是否为文件

public boolean exists()
测试此抽象路径名表示的File是否存在
```
```java
public String getAbsolutePath() 
获取绝对路径
返回此抽象路径名的绝对路径名字符串

public String getPath()
获取文件定义时的路径
将此抽象路径名转换为路径名字符串

public String getName()
获取文件名称，带后缀
返回由此抽象路径名表示的文件或目录的名称
```

# 文件目录的遍历
```java
public String[] list()
获取当前目录下所有的"一级文件目录名称"到一个字符串数组中去返回
返回此抽象路径名表示的目录中的文件和目录的名称字符串数组

public File[] listFiles() 常用
获取当前目录下所有的"一级文件目录对象"到一个文件对象数组中去返回(重点)
返回此抽象路径名表示的目录中的文件和目录的File对象数组
```

# File类删除功能
```java
public boolean delete()
删除由此抽象路径名表示的文件或目录
```
# 删除目录时的注意事项
不能删除非空文件夹，只能删除空文件夹。
如果一个目录中有内容(目录，文件)，不能直接删除。应该先删除目录中的内容，最后才能删除目录。


# 拓展
获取文件最后修改时间
```java
File f1= new File(xxx);
long time = f1.lastModified();//最后修改时间
```
---